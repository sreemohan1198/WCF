// <auto-generated />
using System;
using EntityFrameworkClassLibrary.EntityData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EntityFrameworkClassLibrary.Migrations
{
    [DbContext(typeof(CustomerOrdersContext))]
    [Migration("20230507015740_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EntityFrameworkClassLibrary.EntityData.Categories", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnName("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("CategoryId")
                        .HasName("PK__categori__19093A2B5A1AE066");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("EntityFrameworkClassLibrary.EntityData.Customers", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("City")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ContactName")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Country")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("CustomerName")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("PostalCode")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("CustomerId")
                        .HasName("PK__customer__A4AE64B8DFBCDF38");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("EntityFrameworkClassLibrary.EntityData.Employees", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnName("EmployeeID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Photo")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("EmployeeId")
                        .HasName("PK__employee__7AD04FF1F8CF4C1C");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("EntityFrameworkClassLibrary.EntityData.OrderDetails", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .HasColumnName("OrderDetailID")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnName("OrderID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnName("ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("order_details");
                });

            modelBuilder.Entity("EntityFrameworkClassLibrary.EntityData.Orders", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnName("OrderID")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnName("CustomerID")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnName("EmployeeID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("date");

                    b.Property<int?>("ShipperId")
                        .HasColumnName("ShipperID")
                        .HasColumnType("int");

                    b.HasKey("OrderId")
                        .HasName("PK__orders__C3905BAFFF7C4C68");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("EntityFrameworkClassLibrary.EntityData.Products", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnName("CategoryID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("ProductName")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("SupplierId")
                        .HasColumnName("SupplierID")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("ProductId")
                        .HasName("PK__products__B40CC6ED3FE12840");

                    b.ToTable("products");
                });

            modelBuilder.Entity("EntityFrameworkClassLibrary.EntityData.Shippers", b =>
                {
                    b.Property<string>("Phone")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("ShipperId")
                        .HasColumnName("ShipperID")
                        .HasColumnType("int");

                    b.Property<string>("ShipperName")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.ToTable("shippers");
                });

            modelBuilder.Entity("EntityFrameworkClassLibrary.EntityData.Suppliers", b =>
                {
                    b.Property<int>("SupplierId")
                        .HasColumnName("SupplierID")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("City")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ContactName")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Country")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("PostalCode")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("SupplierName")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("SupplierId")
                        .HasName("PK__supplier__4BE666944E339601");

                    b.ToTable("suppliers");
                });

            modelBuilder.Entity("EntityFrameworkClassLibrary.EntityData.OrderDetails", b =>
                {
                    b.HasOne("EntityFrameworkClassLibrary.EntityData.Orders", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__order_det__Order__6477ECF3");

                    b.HasOne("EntityFrameworkClassLibrary.EntityData.Products", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__order_det__Produ__656C112C");
                });
#pragma warning restore 612, 618
        }
    }
}
